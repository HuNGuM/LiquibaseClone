plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1' // Плагин для создания "fat" JAR
    id 'jacoco'
}

group = 'com.mylibrary'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.postgresql:postgresql:42.3.1'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'ch.qos.logback:logback-classic:1.2.6'
    implementation 'ch.qos.logback:logback-core:1.2.6'
    implementation 'org.apache.commons:commons-dbcp2:2.9.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    testImplementation 'com.h2database:h2:2.1.214'
    testImplementation 'org.testcontainers:postgresql:1.20.4'


    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

}


test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact(tasks.jar) {
                classifier = 'plain'
            }

            artifact(tasks.shadowJar) {
                classifier = 'all-fat'
            }

            groupId = 'com.mylibrary'
            artifactId = 'LiquibaseCloneProject'
            version = '1.0.0'

            pom {
                name = 'LiquibaseCloneProject'
                description = 'My custom Liquibase migration project'
                url = 'https://example.com/my-library'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id = 'yourId'
                        name = 'Your Name'
                        email = 'your.email@example.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/your/project.git'
                    developerConnection = 'scm:git:ssh://github.com/your/project.git'
                    url = 'https://github.com/your/project'
                }
            }
        }
    }

    repositories {
        maven {
            url = uri("$buildDir/repos")
        }
    }
}
jacocoTestReport {
    dependsOn test

    reports {
        xml {
            setEnabled(true)
            destination file("${buildDir}/jacocoTestReport.xml")
        }
        html {
            setEnabled(true)
            destination file("${buildDir}/jacocoHtml")
        }
    }

}